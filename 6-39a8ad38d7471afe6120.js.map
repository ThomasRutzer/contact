{"version":3,"sources":["webpack:///./node_modules/splitting/dist/splitting.js"],"names":["module","exports","root","document","createText","createTextNode","bind","setProperty","el","varName","value","style","appendChild","child","createElement","parent","key","text","whitespace","className","setAttribute","textContent","getData","getAttribute","$","e","length","nodeName","slice","call","querySelectorAll","Array2D","len","a","each","items","fn","some","selectFrom","obj","plugins","createPlugin","by","depends","split","resolve","resolvePlugins","deps","index","indexOf","unshift","p","indexOfParent","splice","map","add","opts","splitText","splitOn","includePrevious","preserveWhitespace","normalize","elements","F","createDocumentFragment","push","previousSibling","allElements","childNodes","next","tagName","hasChildNodes","apply","wholeText","contents","trim","i","splitEl","innerHTML","wordPlugin","CHARS","charPlugin","options","ctx","results","word","Splitting","target","force","opts2","dest","src","k","copy","plugin","pluginBy","key2","element","prefix","cssVar","Array","isArray","item","classList","detectGrid","side","matching","children","c","w","val","Math","round","Object","keys","Number","sort","byNumber","b","html","content","outerHTML","linePlugin","itemPlugin","rowPlugin","columnPlugin","gridPlugin","layoutPlugin","rows","columns","image","currentSrc","img","totalCells","container","cell","cellRowPlugin","rowCount","result","floor","cellColumnPlugin","columnCount","cellPlugin","opt","factory"],"mappings":"6EAC6DA,EAAAC,QAG5D,WAAqB,aAEtB,IAAAC,EAAAC,SACAC,EAAAF,EAAAG,eAAAC,KAAAJ,GASA,SAAAK,EAAAC,EAAAC,EAAAC,GACAF,EAAAG,MAAAJ,YAAAE,EAAAC,GAQA,SAAAE,EAAAJ,EAAAK,GACA,OAAAL,EAAAI,YAAAC,GAGA,SAAAC,EAAAC,EAAAC,EAAAC,EAAAC,GACA,IAAAV,EAAAN,EAAAY,cAAA,QAMA,OALAE,IAAAR,EAAAW,UAAAH,GACAC,KACAC,GAAAV,EAAAY,aAAA,QAAAJ,EAAAC,GACAT,EAAAa,YAAAJ,GAEAF,GAAAH,EAAAG,EAAAP,MAGA,SAAAc,EAAAd,EAAAQ,GACA,OAAAR,EAAAe,aAAA,QAAAP,GASA,SAAAQ,EAAAC,EAAAV,GACA,OAAAU,GAAA,GAAAA,EAAAC,OAGAD,EAAAE,SAEA,CAAAF,GAEA,GAAAG,MAAAC,KAAAJ,EAAA,GAAAE,SAAAF,GAAAV,GAAAb,GAAA4B,iBAAAL,IALA,GAeA,SAAAM,EAAAC,GAEA,IADA,IAAAC,EAAA,GACUD,KACVC,EAAAD,GAAA,GAEA,OAAAC,EAGA,SAAAC,EAAAC,EAAAC,GACAD,KAAAE,KAAAD,GAGA,SAAAE,EAAAC,GACA,gBAAAvB,GACA,OAAAuB,EAAAvB,IAgCA,IAAAwB,EAAA,GAsCA,SAAAC,EAAAC,EAAAC,EAAA3B,EAAA4B,GACA,OACAF,KACAC,UACA3B,MACA4B,SASA,SAAAC,EAAAH,GACA,OA7CA,SAAAI,EAAAJ,EAAA3B,EAAAgC,GAEA,IAAAC,EAAAD,EAAAE,QAAAP,GACA,OAAAM,EAEAD,EAAAG,QAAAR,GAGAR,EAAAM,EAAAE,GAAAC,QAAA,SAAAQ,GACAL,EAAAK,EAAAT,EAAAK,SAEK,CAGL,IAAAK,EAAAL,EAAAE,QAAAlC,GACAgC,EAAAM,OAAAL,EAAA,GACAD,EAAAM,OAAAD,EAAA,EAAAV,GAEA,OAAAK,EA2BAD,CAAAJ,EAAA,MAAAY,IAAAhB,EAAAE,IAOA,SAAAe,EAAAC,GACAhB,EAAAgB,EAAAd,IAAAc,EAYA,SAAAC,EAAAjD,EAAAQ,EAAA0C,EAAAC,EAAAC,GAEApD,EAAAqD,YAGA,IAAAC,EAAA,GACAC,EAAA5D,SAAA6D,yBAEAL,GACAG,EAAAG,KAAAzD,EAAA0D,iBAGA,IAAAC,EAAA,GAgDA,OA/CA3C,EAAAhB,EAAA4D,YAAA/B,KAAA,SAAAgC,GACA,IAAAA,EAAAC,SAAAD,EAAAE,gBAAA,CAMA,GAAAF,EAAAD,YAAAC,EAAAD,WAAA1C,OAGA,OAFAyC,EAAAF,KAAAI,QACAP,EAAAG,KAAAO,MAAAV,EAAAL,EAAAY,EAAArD,EAAA0C,EAAAC,EAAAC,IAMA,IAAAa,EAAAJ,EAAAI,WAAA,GACAC,EAAAD,EAAAE,OAGAD,EAAAhD,SAEA,MAAA+C,EAAA,IACAN,EAAAF,KAAA7D,EAAA,MAGA8B,EAAAwC,EAAA9B,MAAAc,GAAA,SAAAD,EAAAmB,GACAA,GAAAhB,GACAO,EAAAF,KAAAnD,EAAAiD,EAAA,iBAAAH,IAEA,IAAAiB,EAAA/D,EAAAiD,EAAA/C,EAAAyC,GACAK,EAAAG,KAAAY,GACAV,EAAAF,KAAAY,KAGA,MAAAJ,IAAA/C,OAAA,IACAyC,EAAAF,KAAA7D,EAAA,YAhCA+D,EAAAF,KAAAI,KAqCAnC,EAAAiC,EAAA,SAAA3D,GACAI,EAAAmD,EAAAvD,KAIAA,EAAAsE,UAAA,GACAlE,EAAAJ,EAAAuD,GACAD,EAaA,IAEAiB,EAAAtC,EAFA,QATA,EAcA,OACA,SAAAjC,GACA,OAAAiD,EAAAjD,EAAA,oBAIAwE,EAAA,QAEAC,EAAAxC,EACAuC,EACA,CAfA,SAgBA,OACA,SAAAxE,EAAA0E,EAAAC,GACA,IAAAC,EAAA,GAMA,OAJAlD,EAAAiD,EAAA,eAAAE,EAAAT,GACAQ,EAAAnB,KAAAO,MAAAY,EAAA3B,EAAA4B,EAAA,UAAAH,EAAAhE,YAAA0D,MAGAQ,IASA,SAAAE,EAAA9B,GAEA,IAAAxC,GADAwC,KAAA,IACAxC,IAEA,OAAAQ,EAAAgC,EAAA+B,QAAA,oBAAAjC,IAAA,SAAA9C,GACA,IAAA2E,EAAA3E,EAAA,MACA,IAAAgD,EAAAgC,OAAAL,EACA,OAAAA,EAGAA,EAAA3E,EAAA,OAAsBA,MACtB,IAAA2B,EAAAU,EAAAW,EAAAd,IAAApB,EAAAd,EAAA,cAAAwE,GACAS,EApDA,SAAAC,EAAAC,GACA,QAAAC,KAAAD,EACAD,EAAAE,GAAAD,EAAAC,GAEA,OAAAF,EAgDAG,CAAA,GAAuBrC,GAavB,OAZAtB,EAAAC,EAAA,SAAA2D,GACA,GAAAA,EAAAlD,MAAA,CACA,IAAAmD,EAAAD,EAAApD,GACAsD,GAAAhF,EAAA,IAAAA,EAAA,IAAA8E,EAAA9E,IACAoE,EAAAU,EAAAlD,MAAApC,EAAAiF,EAAAN,GACAa,GAzNA,SAAAC,EAAAjF,EAAAmB,GACA,IAAA+D,EAAA,KAAAlF,EACAmF,EAAAD,EAAA,SAEAhE,EAAAC,EAAA,SAAAA,EAAAyC,GACAwB,MAAAC,QAAAlE,GACAD,EAAAC,EAAA,SAAAmE,GACA/F,EAAA+F,EAAAH,EAAAvB,KAGArE,EAAA4B,EAAAgE,EAAAvB,KAIArE,EAAA0F,EAAAC,EAAA,SAAA/D,EAAAT,QA2MAsB,CAAAxC,EAAAwF,EAAAZ,GACAD,EAAAY,GAAAX,EACA5E,EAAA+F,UAAAhD,IAAAwC,MAIAvF,EAAA+F,UAAAhD,IAAA,aACA4B,IAoBA,SAAAqB,EAAAhG,EAAA0E,EAAAuB,GACA,IAAAtE,EAAAX,EAAA0D,EAAAwB,UAAAlG,EAAAmG,SAAAnG,GACAoG,EAAA,GAOA,OALA1E,EAAAC,EAAA,SAAA0E,GACA,IAAAC,EAAAC,KAAAC,MAAAH,EAAAJ,KACAG,EAAAE,KAAAF,EAAAE,GAAA,KAAA7C,KAAA4C,KAGAI,OAAAC,KAAAN,GAAAtD,IAAA6D,QAAAC,KAAAC,GAAA/D,IAAAhB,EAAAsE,IAGA,SAAAS,EAAApF,EAAAqF,GACA,OAAArF,EAAAqF,EAhBAhC,EAAAiC,KARA,SAAA/D,GAEA,IAAAzC,GADAyC,KAAA,IACA+B,OAAAzE,IAGA,OAFAC,EAAA+D,UAAAtB,EAAAgE,QACAlC,EAAA9B,GACAzC,EAAA0G,WAIAnC,EAAA/B,MAkBA,IAAAmE,EAAAjF,EACA,QACA,CAhGA,SAiGA,OACA,SAAAjC,EAAA0E,EAAAC,GACA,OAAAqB,EAAAhG,EAAA,CAA6BkG,SAAAvB,EAAA,OAAuB,eAIpDwC,EAAAlF,EACA,QAjHA,EAmHA,OACA,SAAAjC,EAAA0E,GACA,OAAA1D,EAAA0D,EAAAwB,UAAAlG,EAAAmG,SAAAnG,KAIAoH,EAAAnF,EACA,OA1HA,EA4HA,MACA,SAAAjC,EAAA0E,GACA,OAAAsB,EAAAhG,EAAA0E,EAAA,eAIA2C,EAAApF,EACA,OAnIA,EAqIA,MACA,SAAAjC,EAAA0E,GACA,OAAAsB,EAAAhG,EAAA0E,EAAA,gBAIA4C,EAAArF,EACA,OACA,iBAKAsF,EAAAtF,EAFA,SAhJA,IAsJA,SAAAjC,EAAAgD,GAEA,IAAAwE,EAAAxE,EAAAwE,OAAAxE,EAAAwE,MAAA1G,EAAAd,EAAA,YACAyH,EAAAzE,EAAAyE,UAAAzE,EAAAyE,SAAA3G,EAAAd,EAAA,eAIA,GADAgD,EAAA0E,MAAA1E,EAAA0E,OAAA5G,EAAAd,EAAA,UAAAA,EAAA2H,YAAA3H,EAAAmF,IACAnC,EAAA0E,MAAA,CACA,IAAAE,EAAA5G,EAAA,MAAAhB,GAAA,GACAgD,EAAA0E,MAAAE,MAAAD,YAAAC,EAAAzC,KAIAnC,EAAA0E,OACA3H,EAAAC,EAAA,0BAAAgD,EAAA0E,MAAA,KAOA,IAJA,IAAAG,EAAAL,EAAAC,EACAnE,EAAA,GAEAwE,EAAAxH,EA1KA,EA0KA,aACAuH,KAAA,CAEA,IAAAE,EAAAzH,EAAAwH,EAAA,QACAxH,EAAAyH,EAAA,cACAzE,EAAAG,KAAAsE,GAMA,OAFA3H,EAAAJ,EAAA8H,GAEAxE,IAIA0E,EAAA/F,EACA,WACA,CA3CA,UA4CA,MACA,SAAAjC,EAAAgD,EAAA2B,GACA,IAAAsD,EAAAjF,EAAAwE,KACAU,EAAA3G,EAAA0G,GAMA,OAJAvG,EAAAiD,EAAA,gBAAAoD,EAAA3D,EAAAe,GACA+C,EAAA3B,KAAA4B,MAAA/D,GAAAe,EAAAjE,OAAA+G,KAAAxE,KAAAsE,KAGAG,IAIAE,EAAAnG,EACA,cACA,CA3DA,UA4DA,MACA,SAAAjC,EAAAgD,EAAA2B,GACA,IAAA0D,EAAArF,EAAAyE,QACAS,EAAA3G,EAAA8G,GAMA,OAJA3G,EAAAiD,EAAA,gBAAAoD,EAAA3D,GACA8D,EAAA9D,EAAAiE,GAAA5E,KAAAsE,KAGAG,IAIAI,EAAArG,EACA,QACA,2BACA,OACA,SAAAjC,EAAAuI,EAAA5D,GAEA,OAAAA,EAAA,SAoBA,OAdA5B,EAAAwB,GACAxB,EAAA0B,GACA1B,EAAAmE,GAEAnE,EAAAoE,GACApE,EAAAqE,GACArE,EAAAsE,GACAtE,EAAAuE,GAEAvE,EAAAwE,GACAxE,EAAAiF,GACAjF,EAAAqF,GACArF,EAAAuF,GAEAxD,EA5e6D0D","file":"6-39a8ad38d7471afe6120.js","sourcesContent":["(function (global, factory) {\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n\ttypeof define === 'function' && define.amd ? define(factory) :\n\t(global.Splitting = factory());\n}(this, (function () { 'use strict';\n\nvar root = document;\nvar createText = root.createTextNode.bind(root);\n\n/**\n * # setProperty\n * Apply a CSS var\n * @param el{HTMLElement} \n * @param varName {string} \n * @param value {string|number}  \n */\nfunction setProperty(el, varName, value) {\n    el.style.setProperty(varName, value);\n} \n\n/**\n * \n * @param {Node} el \n * @param {Node} child \n */\nfunction appendChild(el, child) {\n  return el.appendChild(child);\n}\n\nfunction createElement(parent, key, text, whitespace) {\n  var el = root.createElement('span');\n  key && (el.className = key); \n  if (text) { \n      !whitespace && el.setAttribute(\"data-\" + key, text);\n      el.textContent = text; \n  }\n  return (parent && appendChild(parent, el)) || el;\n}\n\nfunction getData(el, key) {\n  return el.getAttribute(\"data-\" + key)\n}\n\n/**\n * \n * @param e {import('../types').Target} \n * @param parent {HTMLElement}\n * @returns {HTMLElement[]}\n */\nfunction $(e, parent) {\n    return !e || e.length == 0\n        ? // null or empty string returns empty array\n          []\n        : e.nodeName\n            ? // a single element is wrapped in an array\n              [e]\n            : // selector and NodeList are converted to Element[]\n              [].slice.call(e[0].nodeName ? e : (parent || root).querySelectorAll(e));\n}\n\n/**\n * Creates and fills an array with the value provided\n * @template {T}\n * @param {number} len\n * @param {() => T} valueProvider\n * @return {T}\n */\nfunction Array2D(len) {\n    var a = [];\n    for (; len--; ) {\n        a[len] = [];\n    }\n    return a;\n}\n\nfunction each(items, fn) {\n    items && items.some(fn);\n}\n\nfunction selectFrom(obj) {\n    return function (key) {\n        return obj[key];\n    }\n}\n\n/**\n * # Splitting.index\n * Index split elements and add them to a Splitting instance.\n *\n * @param element {HTMLElement}\n * @param key {string}\n * @param items {HTMLElement[] | HTMLElement[][]}\n */\nfunction index(element, key, items) {\n    var prefix = '--' + key;\n    var cssVar = prefix + \"-index\";\n\n    each(items, function (items, i) {\n        if (Array.isArray(items)) {\n            each(items, function(item) {\n                setProperty(item, cssVar, i);\n            });\n        } else {\n            setProperty(items, cssVar, i);\n        }\n    });\n\n    setProperty(element, prefix + \"-total\", items.length);\n}\n\n/**\n * @type {Record<string, import('./types').ISplittingPlugin>}\n */\nvar plugins = {};\n\n/**\n * @param by {string}\n * @param parent {string}\n * @param deps {string[]}\n * @return {string[]}\n */\nfunction resolvePlugins(by, parent, deps) {\n    // skip if already visited this dependency\n    var index = deps.indexOf(by);\n    if (index == -1) {\n        // if new to dependency array, add to the beginning\n        deps.unshift(by);\n\n        // recursively call this function for all dependencies\n        each(plugins[by].depends, function(p) {\n            resolvePlugins(p, by, deps);\n        });\n    } else {\n        // if this dependency was added already move to the left of\n        // the parent dependency so it gets loaded in order\n        var indexOfParent = deps.indexOf(parent);\n        deps.splice(index, 1);\n        deps.splice(indexOfParent, 0, by);\n    }\n    return deps;\n}\n\n/**\n * Internal utility for creating plugins... essentially to reduce\n * the size of the library\n * @param {string} by \n * @param {string} key \n * @param {string[]} depends \n * @param {Function} split \n * @returns {import('./types').ISplittingPlugin}\n */\nfunction createPlugin(by, depends, key, split) {\n    return {\n        by: by,\n        depends: depends,\n        key: key,\n        split: split\n    }\n}\n\n/**\n *\n * @param by {string}\n * @returns {import('./types').ISplittingPlugin[]}\n */\nfunction resolve(by) {\n    return resolvePlugins(by, 0, []).map(selectFrom(plugins));\n}\n\n/**\n * Adds a new plugin to splitting\n * @param opts {import('./types').ISplittingPlugin}\n */\nfunction add(opts) {\n    plugins[opts.by] = opts;\n}\n\n/**\n * # Splitting.split\n * Split an element's textContent into individual elements\n * @param el {Node} Element to split\n * @param key {string}\n * @param splitOn {string}\n * @param includeSpace {boolean}\n * @returns {HTMLElement[]}\n */\nfunction splitText(el, key, splitOn, includePrevious, preserveWhitespace) {\n    // Combine any strange text nodes or empty whitespace.\n    el.normalize();\n\n    // Use fragment to prevent unnecessary DOM thrashing.\n    var elements = [];\n    var F = document.createDocumentFragment();\n\n    if (includePrevious) {\n        elements.push(el.previousSibling);\n    }\n\n    var allElements = [];\n    $(el.childNodes).some(function(next) {\n        if (next.tagName && !next.hasChildNodes()) {\n            // keep elements without child nodes (no text and no children)\n            allElements.push(next);\n            return;\n        }\n        // Recursively run through child nodes\n        if (next.childNodes && next.childNodes.length) {\n            allElements.push(next);\n            elements.push.apply(elements, splitText(next, key, splitOn, includePrevious, preserveWhitespace));\n            return;\n        }\n\n        // Get the text to split, trimming out the whitespace\n        /** @type {string} */\n        var wholeText = next.wholeText || '';\n        var contents = wholeText.trim();\n\n        // If there's no text left after trimming whitespace, continue the loop\n        if (contents.length) {\n            // insert leading space if there was one\n            if (wholeText[0] === ' ') {\n                allElements.push(createText(' '));\n            }\n            // Concatenate the split text children back into the full array\n            each(contents.split(splitOn), function(splitText, i) {\n                if (i && preserveWhitespace) {\n                    allElements.push(createElement(F, \"whitespace\", \" \", preserveWhitespace));\n                }\n                var splitEl = createElement(F, key, splitText);\n                elements.push(splitEl);\n                allElements.push(splitEl);\n            }); \n            // insert trailing space if there was one\n            if (wholeText[wholeText.length - 1] === ' ') {\n                allElements.push(createText(' '));\n            }\n        }\n    });\n\n    each(allElements, function(el) {\n        appendChild(F, el);\n    });\n\n    // Clear out the existing element\n    el.innerHTML = \"\";\n    appendChild(el, F);\n    return elements;\n}\n\n/** an empty value */\nvar _ = 0;\n\nfunction copy(dest, src) {\n    for (var k in src) {\n        dest[k] = src[k];\n    }\n    return dest;\n}\n\nvar WORDS = 'words';\n\nvar wordPlugin = createPlugin(\n    /*by: */ WORDS,\n    /*depends: */ _,\n    /*key: */ 'word', \n    /*split: */ function(el) {\n        return splitText(el, 'word', /\\s+/, 0, 1)\n    }\n);\n\nvar CHARS = \"chars\";\n\nvar charPlugin = createPlugin(\n    /*by: */ CHARS,\n    /*depends: */ [WORDS],\n    /*key: */ \"char\", \n    /*split: */ function(el, options, ctx) {\n        var results = [];\n\n        each(ctx[WORDS], function(word, i) {\n            results.push.apply(results, splitText(word, \"char\", \"\", options.whitespace && i));\n        });\n\n        return results;\n    }\n);\n\n/**\n * # Splitting\n * \n * @param opts {import('./types').ISplittingOptions} \n */\nfunction Splitting (opts) {\n  opts = opts || {};\n  var key = opts.key;\n\n  return $(opts.target || '[data-splitting]').map(function(el) {\n    var ctx = el['🍌'];  \n    if (!opts.force && ctx) {\n      return ctx;\n    }\n\n    ctx = el['🍌'] = { el: el };\n    var items = resolve(opts.by || getData(el, 'splitting') || CHARS);\n    var opts2 = copy({}, opts);\n    each(items, function(plugin) {\n      if (plugin.split) {\n        var pluginBy = plugin.by;\n        var key2 = (key ? '-' + key : '') + plugin.key;\n        var results = plugin.split(el, opts2, ctx);\n        key2 && index(el, key2, results);\n        ctx[pluginBy] = results;\n        el.classList.add(pluginBy);\n      } \n    });\n\n    el.classList.add('splitting');\n    return ctx;\n  })\n}\n\n/**\n * # Splitting.html\n * \n * @param opts {import('./types').ISplittingOptions}\n */\nfunction html(opts) {\n  opts = opts || {};\n  var parent = opts.target =  createElement();\n  parent.innerHTML = opts.content;\n  Splitting(opts);\n  return parent.outerHTML\n}\n\nSplitting.html = html;\nSplitting.add = add;\n\nfunction detectGrid(el, options, side) {\n    var items = $(options.matching || el.children, el);\n    var c = {};\n\n    each(items, function(w) {\n        var val = Math.round(w[side]);\n        (c[val] || (c[val] = [])).push(w);\n    });\n\n    return Object.keys(c).map(Number).sort(byNumber).map(selectFrom(c));\n}\n\nfunction byNumber(a, b) {\n    return a - b;\n}\n\nvar linePlugin = createPlugin(\n    /*by: */ 'lines',\n    /*depends: */ [WORDS],\n    /*key: */ 'line',\n    /*split: */ function(el, options, ctx) {\n      return detectGrid(el, { matching: ctx[WORDS] }, 'offsetTop')\n    }\n);\n\nvar itemPlugin = createPlugin(\n    /*by: */ 'items',\n    /*depends: */ _,\n    /*key: */ 'item', \n    /*split: */ function(el, options) {\n        return $(options.matching || el.children, el)\n    }\n);\n\nvar rowPlugin = createPlugin(\n    /*by: */ 'rows',\n    /*depends: */ _,\n    /*key: */ 'row', \n    /*split: */ function(el, options) {\n        return detectGrid(el, options, \"offsetTop\");\n    }\n);\n\nvar columnPlugin = createPlugin(\n    /*by: */ 'cols',\n    /*depends: */ _,\n    /*key: */ \"col\", \n    /*split: */ function(el, options) {\n        return detectGrid(el, options, \"offsetLeft\");\n    }\n);\n\nvar gridPlugin = createPlugin(\n    /*by: */ 'grid',\n    /*depends: */ ['rows', 'cols']\n);\n\nvar LAYOUT = \"layout\";\n\nvar layoutPlugin = createPlugin(\n    /*by: */ LAYOUT,\n    /*depends: */ _,\n    /*key: */ _,\n    /*split: */ function(el, opts) {\n        // detect and set options\n        var rows =  opts.rows = +(opts.rows || getData(el, 'rows') || 1);\n        var columns = opts.columns = +(opts.columns || getData(el, 'columns') || 1);\n\n        // Seek out the first <img> if the value is true \n        opts.image = opts.image || getData(el, 'image') || el.currentSrc || el.src;\n        if (opts.image) {\n            var img = $(\"img\", el)[0];\n            opts.image = img && (img.currentSrc || img.src);\n        }\n\n        // add optional image to background\n        if (opts.image) {\n            setProperty(el, \"background-image\", \"url(\" + opts.image + \")\");\n        }\n\n        var totalCells = rows * columns;\n        var elements = [];\n\n        var container = createElement(_, \"cell-grid\");\n        while (totalCells--) {\n            // Create a span\n            var cell = createElement(container, \"cell\");\n            createElement(cell, \"cell-inner\");\n            elements.push(cell);\n        }\n\n        // Append elements back into the parent\n        appendChild(el, container);\n\n        return elements;\n    }\n);\n\nvar cellRowPlugin = createPlugin(\n    /*by: */ \"cellRows\",\n    /*depends: */ [LAYOUT],\n    /*key: */ \"row\",\n    /*split: */ function(el, opts, ctx) {\n        var rowCount = opts.rows;\n        var result = Array2D(rowCount);\n\n        each(ctx[LAYOUT], function(cell, i, src) {\n            result[Math.floor(i / (src.length / rowCount))].push(cell);\n        });\n\n        return result;\n    }\n);\n\nvar cellColumnPlugin = createPlugin(\n    /*by: */ \"cellColumns\",\n    /*depends: */ [LAYOUT],\n    /*key: */ \"col\",\n    /*split: */ function(el, opts, ctx) {\n        var columnCount = opts.columns;\n        var result = Array2D(columnCount);\n\n        each(ctx[LAYOUT], function(cell, i) {\n            result[i % columnCount].push(cell);\n        });\n\n        return result;\n    }\n);\n\nvar cellPlugin = createPlugin(\n    /*by: */ \"cells\",\n    /*depends: */ ['cellRows', 'cellColumns'],\n    /*key: */ \"cell\", \n    /*split: */ function(el, opt, ctx) { \n        // re-index the layout as the cells\n        return ctx[LAYOUT];\n    }\n);\n\n// install plugins\n// word/char plugins\nadd(wordPlugin);\nadd(charPlugin);\nadd(linePlugin);\n// grid plugins\nadd(itemPlugin);\nadd(rowPlugin);\nadd(columnPlugin);\nadd(gridPlugin);\n// cell-layout plugins\nadd(layoutPlugin);\nadd(cellRowPlugin);\nadd(cellColumnPlugin);\nadd(cellPlugin);\n\nreturn Splitting;\n\n})));\n"],"sourceRoot":""}